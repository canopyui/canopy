// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.App = (function() {

    App.prototype.path_elem = '#viz-path';

    App.prototype.viz_elem = '#viz-collections';

    App.prototype.list_elem = '#viz-list';

    function App(d3_layout) {
      this.onCircleClick = __bind(this.onCircleClick, this);

      var _this = this;
      this.github = new App.Github;
      this.d3 = new d3_layout;
      $(this.path_elem).find('[data-path="root"]').on('click', function() {
        return _this.render(_this.data.root);
      });
    }

    App.prototype.loadGitRepo = function(repo, options) {
      var opts,
        _this = this;
      if (options == null) {
        options = {};
      }
      opts = $.extend({
        sha: 'HEAD',
        local: false,
        recursive: true
      }, options, {
        repo: repo
      });
      this.loaded = opts;
      opts.recursive = opts.recursive ? 1 : 0;
      if (!opts.local) {
        repo = "https://api.github.com/repos/" + repo + "/git/trees/" + opts.sha + "?recursive=" + opts.recursive + "&callback=?";
      }
      return this.github.loadRepo(repo, function(data) {
        _this.data = _this.github.parseForD3(data);
        return _this.render(_this.data.root);
      });
    };

    App.prototype.render = function(data) {
      $(this.path_elem).find('[data-path="path"]').text(data.path);
      $(this.viz_elem).empty();
      this.d3.render(this.viz_elem, data, {
        click: this.onCircleClick
      });
      if (data.children) {
        return this.renderList(data);
      }
    };

    App.prototype.renderList = function(data) {
      var list, node, _i, _len, _results;
      list = $(this.list_elem).empty();
      data = data.children.sort(function(a, b) {
        a = a.name.toLowerCase();
        b = b.name.toLowerCase();
        if (a === b) {
          return 0;
        }
        if (a > b) {
          return 1;
        }
        if (a < b) {
          return -1;
        }
      });
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        node = data[_i];
        _results.push(list.append("<div>" + node.path + "</div>"));
      }
      return _results;
    };

    App.prototype.trimTree = function(tree, level, extend) {
      var branch, _i, _len, _ref;
      if (level == null) {
        level = 1;
      }
      if (extend == null) {
        extend = true;
      }
      if (extend) {
        tree = $.extend({}, tree);
      }
      if (!tree.children) {
        return tree;
      }
      _ref = tree.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        branch = _ref[_i];
        if (!branch.children) {
          continue;
        }
        if (level === 1) {
          branch.size = this.sumSize(branch.children);
          delete branch.children;
        } else {
          this.trimTree(branch, level - 1);
        }
      }
      return tree;
    };

    App.prototype.sumSize = function(tree) {
      return 0;
    };

    App.prototype.onCircleClick = function(evt) {
      return this.render(evt);
    };

    return App;

  })();

}).call(this);
